@startuml
'https://plantuml.com/class-diagram

class App {
+{static}main() : void
}
class Player{
-name : String
-picture : ImageIcon
}
class Game{
-score : int
-difficulty : int
-revive : boolean
-fiftyPercent : boolean
-audience : boolean
-telephone : boolean
-switchQuestion : int
-questionNumber : int
-cheatInfinityJoker : boolean
-cheatDiagram : boolean
-cheatInfinityRevive : boolean
-cheatFiftyFifty : boolean
-list : MotherList<Question>

+useRevive(): void
+useFiftyPercent(): void
+useTelephone(): void
+useSwitchQuestion():void
+useAudience(): void
+askAQuestion(int difficulty): void
+multiplayer(): void
+singleplayer(): void
+questionMaker(): void
+reverse(): void

}
class Node<T>{
-next: Node<T>

+isEmpty(): boolean
+enqueue(T pObject): void
+dequeue(): void
+front(): T
}
class GameControl{
-storage : Storage
-player : ArrayList<Player>
-gui : GUI
-gameLength : int
-cheatInfinityJoker : boolean
-cheatDiagram : boolean
-cheatInfinityRevive : boolean
-cheatFiftyFifty : boolean

+startGame() : void
+createPlayer(): void
+showTopTen() : void
+options() : void
+choosePlayer() : void
}
class Question{
-question : String
-answers : String[]
-difficulty : int
}
class PlayerData{
- score : int
- jonas : Achievement
- veteran : Achievement
- smaarten: Achievement
- gunterJauch : Achievement
- mafiaTenbrock : Achievement

}
abstract class MotherList<T>{

}
class Achievement{
-description : String
-mame : String
-boolean achieved
+conditions() : void
}
class Storage{
-questions : ArrayList<Question>

getQuestion(int difficulty) : Question
}



class Stack<T> extends MotherList{
-first : Node

+isEmpty(): boolean
+push(T pObject): void
+pop(): void
+top(): T
}
class Queue<T> extends MotherList{
-first: Node<T>

+isEmpty(): boolean
+enqueue(T pObject): void
+dequeue(): void
+front(): T
}

class List<T> extends MotherList{
-first: Node<T>
-currentNode: Node<T>

+isEmpty(): boolean
+hasAccess(): boolean
+next(): void
+toFirst(): void
+toLast(): void
+getObject(): T
+setObject(): void
+append(T pContext): void
+insert(T pContext): void
+contact(List<T> pList): void
+remove(): void
}
List --* Node
Stack --* Node
Queue --* Node
Node --* Node

Storage::questions --o "0...*"Question
GameControl::startGame --> Game : Starts

PlayerData --o "0...*"Game : stores in a List
Player --* "1"PlayerData : playerData
Game::multiplayer --> List : list = List
Game::singleplayer --> List : list = List
Game::reverse --> Queue : list = Queue
Game::questions --> Stack : list = Stack
GameControl::storage --* "1"Storage
GameControl::player --o "0..*"Player : List
Storage::games --o "0...*"Game
App --* "1"GameControl


@enduml